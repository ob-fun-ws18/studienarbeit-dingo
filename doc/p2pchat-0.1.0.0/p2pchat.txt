-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Please see the README on GitHub at
--   <a>https://github.com/ob-fun-ws18/studienarbeit-p2pchat#readme</a>
@package p2pchat
@version 0.1.0.0


module P2PChat.Common

-- | Events used to communicate via Channels
data Event

-- | Input from commandline
CmdInput :: String -> Event

-- | Quit from commandline
CmdQuit :: Event

-- | String to print on commandline
CmdOutput :: String -> Event

-- | Client Connect, updated list of members
SockHostConnect :: Member -> [Member] -> Event

-- | Client Disconnect, updates list of member
SockHostDisconnect :: Member -> [Member] -> Event

-- | User, Msg sock -&gt; main
SockMsgIn :: String -> String -> Event

-- | User, Msg main -&gt; sock
SockMsgOut :: String -> Event

-- | Client Mode: Socket disconnect
SockClientDisconnect :: Event

-- | Checks if the event also forces a disconnect from the server
isDisconnect :: Event -> Bool

-- | Checks if the event also forces an application quit
isQuit :: Event -> Bool

-- | Mode to Start in (Host or Client)
data StartMode
StartHost :: StartMode
StartClient :: String -> Int -> StartMode

-- | Config to start with
data StartConfig
StartConfig :: String -> Int -> StartMode -> StartConfig
[username] :: StartConfig -> String
[hostPort] :: StartConfig -> Int
[mode] :: StartConfig -> StartMode

-- | Communication Channels used for thread communication
data Channels
Channels :: Chan Event -> Chan Event -> Chan Event -> Channels
[cmain] :: Channels -> Chan Event
[cterm] :: Channels -> Chan Event
[csock] :: Channels -> Chan Event

-- | Global Data
data Global
Global :: String -> String -> Int -> Global
[myUserName] :: Global -> String
[myUUID] :: Global -> String
[myHostPort] :: Global -> Int

-- | Chat Member description
data Member
Member :: String -> String -> String -> Int -> Member
[mUsername] :: Member -> String
[mUUID] :: Member -> String
[mHostname] :: Member -> String
[mPort] :: Member -> Int

-- | Generic JsonMessage
data JsonMessage
JsonMessage :: String -> Maybe JsonPayloadConnect -> Maybe JsonPayloadClientConnected -> Maybe JsonPayloadClientDisconnected -> Maybe JsonPayloadMessage -> JsonMessage
[jsType] :: JsonMessage -> String
[jsConnect] :: JsonMessage -> Maybe JsonPayloadConnect
[jsClientConnected] :: JsonMessage -> Maybe JsonPayloadClientConnected
[jsClientDisconnected] :: JsonMessage -> Maybe JsonPayloadClientDisconnected
[jsMessage] :: JsonMessage -> Maybe JsonPayloadMessage

-- | JsonPayload when connection
data JsonPayloadConnect
JsonPayloadConnect :: String -> String -> Int -> JsonPayloadConnect
[jspCname] :: JsonPayloadConnect -> String
[jspCuuid] :: JsonPayloadConnect -> String
[jspChostPort] :: JsonPayloadConnect -> Int

-- | JsonPayload when a client connected
data JsonPayloadClientConnected
JsonPayloadClientConnected :: Member -> [Member] -> JsonPayloadClientConnected
[jspCCmember] :: JsonPayloadClientConnected -> Member
[jspCCmembers] :: JsonPayloadClientConnected -> [Member]

-- | JsonPayload when a client disconnected
data JsonPayloadClientDisconnected
JsonPayloadClientDisconnected :: Member -> [Member] -> JsonPayloadClientDisconnected
[jspCDmember] :: JsonPayloadClientDisconnected -> Member
[jspCDmembers] :: JsonPayloadClientDisconnected -> [Member]

-- | JsonPayload when sending a message
data JsonPayloadMessage
JsonPayloadMessage :: String -> String -> JsonPayloadMessage
[jspMname] :: JsonPayloadMessage -> String
[jspMmsg] :: JsonPayloadMessage -> String

-- | Helper to Construct an empty Message
jsonEmpty :: String -> JsonMessage

-- | Helper to Construct an <a>Ok</a> message
jsonOK :: JsonMessage

-- | Helper to Construct a Heartbeat
jsonHeartbeat :: JsonMessage

-- | Helper to Construct a connect Message
jsonConnect :: String -> String -> Int -> JsonMessage

-- | Helper to Construct a ClientConnected Message
jsonClientConnected :: Member -> [Member] -> JsonMessage

-- | Helper to Construct a ClientDisconnected Message
jsonClientDisconnected :: Member -> [Member] -> JsonMessage

-- | Helper to Construct a JsonMessage message
jsonMessageSend :: String -> String -> JsonMessage

-- | Helper to Parse Json from incoming ByteString
jsonParse :: ByteString -> Maybe JsonMessage

-- | Helper to to check if its the JsonOK Message
isJsonOK :: JsonMessage -> Bool
instance GHC.Classes.Eq P2PChat.Common.JsonMessage
instance Data.Aeson.Types.FromJSON.FromJSON P2PChat.Common.JsonMessage
instance Data.Aeson.Types.ToJSON.ToJSON P2PChat.Common.JsonMessage
instance GHC.Generics.Generic P2PChat.Common.JsonMessage
instance GHC.Show.Show P2PChat.Common.JsonMessage
instance GHC.Classes.Eq P2PChat.Common.JsonPayloadMessage
instance Data.Aeson.Types.FromJSON.FromJSON P2PChat.Common.JsonPayloadMessage
instance Data.Aeson.Types.ToJSON.ToJSON P2PChat.Common.JsonPayloadMessage
instance GHC.Generics.Generic P2PChat.Common.JsonPayloadMessage
instance GHC.Show.Show P2PChat.Common.JsonPayloadMessage
instance GHC.Classes.Eq P2PChat.Common.JsonPayloadClientDisconnected
instance Data.Aeson.Types.FromJSON.FromJSON P2PChat.Common.JsonPayloadClientDisconnected
instance Data.Aeson.Types.ToJSON.ToJSON P2PChat.Common.JsonPayloadClientDisconnected
instance GHC.Generics.Generic P2PChat.Common.JsonPayloadClientDisconnected
instance GHC.Show.Show P2PChat.Common.JsonPayloadClientDisconnected
instance GHC.Classes.Eq P2PChat.Common.JsonPayloadClientConnected
instance Data.Aeson.Types.FromJSON.FromJSON P2PChat.Common.JsonPayloadClientConnected
instance Data.Aeson.Types.ToJSON.ToJSON P2PChat.Common.JsonPayloadClientConnected
instance GHC.Generics.Generic P2PChat.Common.JsonPayloadClientConnected
instance GHC.Show.Show P2PChat.Common.JsonPayloadClientConnected
instance GHC.Classes.Eq P2PChat.Common.JsonPayloadConnect
instance Data.Aeson.Types.FromJSON.FromJSON P2PChat.Common.JsonPayloadConnect
instance Data.Aeson.Types.ToJSON.ToJSON P2PChat.Common.JsonPayloadConnect
instance GHC.Generics.Generic P2PChat.Common.JsonPayloadConnect
instance GHC.Show.Show P2PChat.Common.JsonPayloadConnect
instance GHC.Classes.Eq P2PChat.Common.Event
instance GHC.Show.Show P2PChat.Common.Event
instance Data.Aeson.Types.FromJSON.FromJSON P2PChat.Common.Member
instance Data.Aeson.Types.ToJSON.ToJSON P2PChat.Common.Member
instance GHC.Generics.Generic P2PChat.Common.Member
instance GHC.Classes.Eq P2PChat.Common.Member
instance GHC.Show.Show P2PChat.Common.Member
instance GHC.Classes.Eq P2PChat.Common.Global
instance GHC.Show.Show P2PChat.Common.Global


module P2PChat.Socket

-- | Read from a handle (Exceptions are caught due to Windows throwing on
--   EOF)
readHandle :: Handle -> IO (Maybe ByteString)

-- | Returns a String given a SockAddr
fromSockAddr :: SockAddr -> (String, Int)


module P2PChat.Socket.Client

-- | Starts the client socket and tries to connect to the host
startSocketClient :: String -> Int -> Global -> Channels -> IO (Maybe ThreadId)


module P2PChat.Socket.Host

-- | Starts the Host Socket and a thread to manage it
startSocketHost :: Global -> Channels -> IO ThreadId
instance GHC.Classes.Eq P2PChat.Socket.Host.SockCLientConnection
instance GHC.Show.Show P2PChat.Socket.Host.SockCLientConnection


module P2PChat.Term

-- | Starts all threads to handle the Console
startTerminal :: Channels -> IO ThreadId


module P2PChat

-- | Generates a random UUID to identify the client/host and sets up 3
--   channels for communication between threads
startP2PChat :: StartConfig -> IO ()

-- | Config to start with
data StartConfig
StartConfig :: String -> Int -> StartMode -> StartConfig
[username] :: StartConfig -> String
[hostPort] :: StartConfig -> Int
[mode] :: StartConfig -> StartMode

-- | Mode to Start in (Host or Client)
data StartMode
StartHost :: StartMode
StartClient :: String -> Int -> StartMode
